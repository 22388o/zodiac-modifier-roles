/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RolesModifierInterface extends utils.Interface {
  contractName: "RolesModifier";
  functions: {
    "allowTarget(uint16,address,bool,bool)": FunctionFragment;
    "allowTargetPartially(uint16,address,bool,bool)": FunctionFragment;
    "assignRoles(address,uint16[],bool[])": FunctionFragment;
    "avatar()": FunctionFragment;
    "defaultRoles(address)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionWithRole(address,uint256,bytes,uint8,uint16,bool)": FunctionFragment;
    "execTransactionWithRoleReturnData(address,uint256,bytes,uint8,uint16,bool)": FunctionFragment;
    "getGuard()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "guard()": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
    "multiSend()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeTarget(uint16,address)": FunctionFragment;
    "scopeAllowFunction(uint16,address,bytes4)": FunctionFragment;
    "scopeFunction(uint16,address,bytes4,bool[],bool[],uint8[],bytes[])": FunctionFragment;
    "scopeParameter(uint16,address,bytes4,uint8,bool,uint8,bytes)": FunctionFragment;
    "scopeParameterAsOneOf(uint16,address,bytes4,uint8,bool,bytes[])": FunctionFragment;
    "scopeRevokeFunction(uint16,address,bytes4)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setDefaultRole(address,uint16)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setMultiSend(address)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unscopeParameter(uint16,address,bytes4,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowTarget",
    values: [BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTargetPartially",
    values: [BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRoles",
    values: [string, BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultRoles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionWithRole",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionWithRoleReturnData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "multiSend", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTarget",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeAllowFunction",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeFunction",
    values: [
      BigNumberish,
      string,
      BytesLike,
      boolean[],
      boolean[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeParameter",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeParameterAsOneOf",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      boolean,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeRevokeFunction",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDefaultRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMultiSend",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unscopeParameter",
    values: [BigNumberish, string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTargetPartially",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionWithRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionWithRoleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeAllowFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeParameterAsOneOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeRevokeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unscopeParameter",
    data: BytesLike
  ): Result;

  events: {
    "AllowTarget(uint16,address,bool,bool)": EventFragment;
    "AllowTargetPartially(uint16,address,bool,bool)": EventFragment;
    "AssignRoles(address,uint16[])": EventFragment;
    "AvatarSet(address,address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevokeTarget(uint16,address)": EventFragment;
    "RolesModSetup(address,address,address,address)": EventFragment;
    "ScopeAllowFunction(uint16,address,bytes4)": EventFragment;
    "ScopeFunction(uint16,address,bytes4,bool[],bool[],uint8[],bytes[])": EventFragment;
    "ScopeParameter(uint16,address,bytes4,uint8,bool,uint8,bytes)": EventFragment;
    "ScopeParameterAsOneOf(uint16,address,bytes4,uint8,bool,bytes[])": EventFragment;
    "ScopeRevokeFunction(uint16,address,bytes4)": EventFragment;
    "SetDefaultRole(address,uint16)": EventFragment;
    "SetMulitSendAddress(address)": EventFragment;
    "TargetSet(address,address)": EventFragment;
    "UnscopeParameter(uint16,address,bytes4,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowTarget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowTargetPartially"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssignRoles"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeTarget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesModSetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeAllowFunction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeFunction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeParameterAsOneOf"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeRevokeFunction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMulitSendAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnscopeParameter"): EventFragment;
}

export type AllowTargetEvent = TypedEvent<
  [number, string, boolean, boolean],
  {
    role: number;
    targetAddress: string;
    canSend: boolean;
    canDelegate: boolean;
  }
>;

export type AllowTargetEventFilter = TypedEventFilter<AllowTargetEvent>;

export type AllowTargetPartiallyEvent = TypedEvent<
  [number, string, boolean, boolean],
  {
    role: number;
    targetAddress: string;
    canSend: boolean;
    canDelegate: boolean;
  }
>;

export type AllowTargetPartiallyEventFilter =
  TypedEventFilter<AllowTargetPartiallyEvent>;

export type AssignRolesEvent = TypedEvent<
  [string, number[]],
  { module: string; roles: number[] }
>;

export type AssignRolesEventFilter = TypedEventFilter<AssignRolesEvent>;

export type AvatarSetEvent = TypedEvent<
  [string, string],
  { previousAvatar: string; newAvatar: string }
>;

export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;

export type ChangedGuardEvent = TypedEvent<[string], { guard: string }>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export type DisabledModuleEvent = TypedEvent<[string], { module: string }>;

export type DisabledModuleEventFilter = TypedEventFilter<DisabledModuleEvent>;

export type EnabledModuleEvent = TypedEvent<[string], { module: string }>;

export type EnabledModuleEventFilter = TypedEventFilter<EnabledModuleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RevokeTargetEvent = TypedEvent<
  [number, string],
  { role: number; targetAddress: string }
>;

export type RevokeTargetEventFilter = TypedEventFilter<RevokeTargetEvent>;

export type RolesModSetupEvent = TypedEvent<
  [string, string, string, string],
  { initiator: string; owner: string; avatar: string; target: string }
>;

export type RolesModSetupEventFilter = TypedEventFilter<RolesModSetupEvent>;

export type ScopeAllowFunctionEvent = TypedEvent<
  [number, string, string],
  { role: number; targetAddress: string; selector: string }
>;

export type ScopeAllowFunctionEventFilter =
  TypedEventFilter<ScopeAllowFunctionEvent>;

export type ScopeFunctionEvent = TypedEvent<
  [number, string, string, boolean[], boolean[], number[], string[]],
  {
    role: number;
    targetAddress: string;
    functionSig: string;
    paramIsScoped: boolean[];
    paramIsDynamic: boolean[];
    paramCompType: number[];
    paramCompValue: string[];
  }
>;

export type ScopeFunctionEventFilter = TypedEventFilter<ScopeFunctionEvent>;

export type ScopeParameterEvent = TypedEvent<
  [number, string, string, number, boolean, number, string],
  {
    role: number;
    targetAddress: string;
    functionSig: string;
    paramIndex: number;
    isDynamic: boolean;
    compType: number;
    compValue: string;
  }
>;

export type ScopeParameterEventFilter = TypedEventFilter<ScopeParameterEvent>;

export type ScopeParameterAsOneOfEvent = TypedEvent<
  [number, string, string, number, boolean, string[]],
  {
    role: number;
    targetAddress: string;
    functionSig: string;
    paramIndex: number;
    isDynamic: boolean;
    compValues: string[];
  }
>;

export type ScopeParameterAsOneOfEventFilter =
  TypedEventFilter<ScopeParameterAsOneOfEvent>;

export type ScopeRevokeFunctionEvent = TypedEvent<
  [number, string, string],
  { role: number; targetAddress: string; selector: string }
>;

export type ScopeRevokeFunctionEventFilter =
  TypedEventFilter<ScopeRevokeFunctionEvent>;

export type SetDefaultRoleEvent = TypedEvent<
  [string, number],
  { module: string; defaultRole: number }
>;

export type SetDefaultRoleEventFilter = TypedEventFilter<SetDefaultRoleEvent>;

export type SetMulitSendAddressEvent = TypedEvent<
  [string],
  { multiSendAddress: string }
>;

export type SetMulitSendAddressEventFilter =
  TypedEventFilter<SetMulitSendAddressEvent>;

export type TargetSetEvent = TypedEvent<
  [string, string],
  { previousTarget: string; newTarget: string }
>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export type UnscopeParameterEvent = TypedEvent<
  [number, string, string, number],
  {
    role: number;
    targetAddress: string;
    functionSig: string;
    paramIndex: number;
  }
>;

export type UnscopeParameterEventFilter =
  TypedEventFilter<UnscopeParameterEvent>;

export interface RolesModifier extends BaseContract {
  contractName: "RolesModifier";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RolesModifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowTarget(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowTargetPartially(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assignRoles(
      module: string,
      _roles: BigNumberish[],
      memberOf: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    avatar(overrides?: CallOverrides): Promise<[string]>;

    defaultRoles(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionWithRole(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionWithRoleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGuard(overrides?: CallOverrides): Promise<[string] & { _guard: string }>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    isModuleEnabled(
      _module: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiSend(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeTarget(
      role: BigNumberish,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scopeAllowFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scopeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      isParamScoped: boolean[],
      isParamDynamic: boolean[],
      paramCompType: BigNumberish[],
      paramCompValue: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compType: BigNumberish,
      compValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scopeParameterAsOneOf(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scopeRevokeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultRole(
      module: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiSend(
      _multiSend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unscopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowTarget(
    role: BigNumberish,
    targetAddress: string,
    canSend: boolean,
    canDelegate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowTargetPartially(
    role: BigNumberish,
    targetAddress: string,
    canSend: boolean,
    canDelegate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assignRoles(
    module: string,
    _roles: BigNumberish[],
    memberOf: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  avatar(overrides?: CallOverrides): Promise<string>;

  defaultRoles(arg0: string, overrides?: CallOverrides): Promise<number>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableModule(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionWithRole(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    role: BigNumberish,
    shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionWithRoleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    role: BigNumberish,
    shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  guard(overrides?: CallOverrides): Promise<string>;

  isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<boolean>;

  multiSend(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeTarget(
    role: BigNumberish,
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scopeAllowFunction(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scopeFunction(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    isParamScoped: boolean[],
    isParamDynamic: boolean[],
    paramCompType: BigNumberish[],
    paramCompValue: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scopeParameter(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    paramIndex: BigNumberish,
    isDynamic: boolean,
    compType: BigNumberish,
    compValue: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scopeParameterAsOneOf(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    paramIndex: BigNumberish,
    isDynamic: boolean,
    compValues: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scopeRevokeFunction(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultRole(
    module: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuard(
    _guard: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiSend(
    _multiSend: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unscopeParameter(
    role: BigNumberish,
    targetAddress: string,
    functionSig: BytesLike,
    paramIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowTarget(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowTargetPartially(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    assignRoles(
      module: string,
      _roles: BigNumberish[],
      memberOf: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    avatar(overrides?: CallOverrides): Promise<string>;

    defaultRoles(arg0: string, overrides?: CallOverrides): Promise<number>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    execTransactionWithRole(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionWithRoleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    guard(overrides?: CallOverrides): Promise<string>;

    isModuleEnabled(
      _module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiSend(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeTarget(
      role: BigNumberish,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeAllowFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      isParamScoped: boolean[],
      isParamDynamic: boolean[],
      paramCompType: BigNumberish[],
      paramCompValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    scopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compType: BigNumberish,
      compValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeParameterAsOneOf(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    scopeRevokeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;

    setDefaultRole(
      module: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;

    setMultiSend(_multiSend: string, overrides?: CallOverrides): Promise<void>;

    setTarget(_target: string, overrides?: CallOverrides): Promise<void>;

    setUp(initParams: BytesLike, overrides?: CallOverrides): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unscopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowTarget(uint16,address,bool,bool)"(
      role?: null,
      targetAddress?: null,
      canSend?: null,
      canDelegate?: null
    ): AllowTargetEventFilter;
    AllowTarget(
      role?: null,
      targetAddress?: null,
      canSend?: null,
      canDelegate?: null
    ): AllowTargetEventFilter;

    "AllowTargetPartially(uint16,address,bool,bool)"(
      role?: null,
      targetAddress?: null,
      canSend?: null,
      canDelegate?: null
    ): AllowTargetPartiallyEventFilter;
    AllowTargetPartially(
      role?: null,
      targetAddress?: null,
      canSend?: null,
      canDelegate?: null
    ): AllowTargetPartiallyEventFilter;

    "AssignRoles(address,uint16[])"(
      module?: null,
      roles?: null
    ): AssignRolesEventFilter;
    AssignRoles(module?: null, roles?: null): AssignRolesEventFilter;

    "AvatarSet(address,address)"(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;
    AvatarSet(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "DisabledModule(address)"(module?: null): DisabledModuleEventFilter;
    DisabledModule(module?: null): DisabledModuleEventFilter;

    "EnabledModule(address)"(module?: null): EnabledModuleEventFilter;
    EnabledModule(module?: null): EnabledModuleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RevokeTarget(uint16,address)"(
      role?: null,
      targetAddress?: null
    ): RevokeTargetEventFilter;
    RevokeTarget(role?: null, targetAddress?: null): RevokeTargetEventFilter;

    "RolesModSetup(address,address,address,address)"(
      initiator?: string | null,
      owner?: string | null,
      avatar?: string | null,
      target?: null
    ): RolesModSetupEventFilter;
    RolesModSetup(
      initiator?: string | null,
      owner?: string | null,
      avatar?: string | null,
      target?: null
    ): RolesModSetupEventFilter;

    "ScopeAllowFunction(uint16,address,bytes4)"(
      role?: null,
      targetAddress?: null,
      selector?: null
    ): ScopeAllowFunctionEventFilter;
    ScopeAllowFunction(
      role?: null,
      targetAddress?: null,
      selector?: null
    ): ScopeAllowFunctionEventFilter;

    "ScopeFunction(uint16,address,bytes4,bool[],bool[],uint8[],bytes[])"(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIsScoped?: null,
      paramIsDynamic?: null,
      paramCompType?: null,
      paramCompValue?: null
    ): ScopeFunctionEventFilter;
    ScopeFunction(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIsScoped?: null,
      paramIsDynamic?: null,
      paramCompType?: null,
      paramCompValue?: null
    ): ScopeFunctionEventFilter;

    "ScopeParameter(uint16,address,bytes4,uint8,bool,uint8,bytes)"(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null,
      isDynamic?: null,
      compType?: null,
      compValue?: null
    ): ScopeParameterEventFilter;
    ScopeParameter(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null,
      isDynamic?: null,
      compType?: null,
      compValue?: null
    ): ScopeParameterEventFilter;

    "ScopeParameterAsOneOf(uint16,address,bytes4,uint8,bool,bytes[])"(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null,
      isDynamic?: null,
      compValues?: null
    ): ScopeParameterAsOneOfEventFilter;
    ScopeParameterAsOneOf(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null,
      isDynamic?: null,
      compValues?: null
    ): ScopeParameterAsOneOfEventFilter;

    "ScopeRevokeFunction(uint16,address,bytes4)"(
      role?: null,
      targetAddress?: null,
      selector?: null
    ): ScopeRevokeFunctionEventFilter;
    ScopeRevokeFunction(
      role?: null,
      targetAddress?: null,
      selector?: null
    ): ScopeRevokeFunctionEventFilter;

    "SetDefaultRole(address,uint16)"(
      module?: null,
      defaultRole?: null
    ): SetDefaultRoleEventFilter;
    SetDefaultRole(
      module?: null,
      defaultRole?: null
    ): SetDefaultRoleEventFilter;

    "SetMulitSendAddress(address)"(
      multiSendAddress?: null
    ): SetMulitSendAddressEventFilter;
    SetMulitSendAddress(
      multiSendAddress?: null
    ): SetMulitSendAddressEventFilter;

    "TargetSet(address,address)"(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;
    TargetSet(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;

    "UnscopeParameter(uint16,address,bytes4,uint8)"(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null
    ): UnscopeParameterEventFilter;
    UnscopeParameter(
      role?: null,
      targetAddress?: null,
      functionSig?: null,
      paramIndex?: null
    ): UnscopeParameterEventFilter;
  };

  estimateGas: {
    allowTarget(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowTargetPartially(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assignRoles(
      module: string,
      _roles: BigNumberish[],
      memberOf: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    defaultRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionWithRole(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionWithRoleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    isModuleEnabled(
      _module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSend(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeTarget(
      role: BigNumberish,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scopeAllowFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scopeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      isParamScoped: boolean[],
      isParamDynamic: boolean[],
      paramCompType: BigNumberish[],
      paramCompValue: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compType: BigNumberish,
      compValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scopeParameterAsOneOf(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scopeRevokeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultRole(
      module: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiSend(
      _multiSend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unscopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowTarget(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowTargetPartially(
      role: BigNumberish,
      targetAddress: string,
      canSend: boolean,
      canDelegate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assignRoles(
      module: string,
      _roles: BigNumberish[],
      memberOf: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultRoles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionWithRole(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionWithRoleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      role: BigNumberish,
      shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isModuleEnabled(
      _module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeTarget(
      role: BigNumberish,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scopeAllowFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scopeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      isParamScoped: boolean[],
      isParamDynamic: boolean[],
      paramCompType: BigNumberish[],
      paramCompValue: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compType: BigNumberish,
      compValue: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scopeParameterAsOneOf(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      isDynamic: boolean,
      compValues: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scopeRevokeFunction(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRole(
      module: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSend(
      _multiSend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unscopeParameter(
      role: BigNumberish,
      targetAddress: string,
      functionSig: BytesLike,
      paramIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
